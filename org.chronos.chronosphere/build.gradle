// ORG.CHRONOS.CHRONOSPHERE/build.gradle

plugins {
    id 'org.jetbrains.kotlin.jvm'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

jar {
    manifest {
        attributes 'Implementation-Title': 'ChronoSphere'
    }
}

test {
    filter {
        includeTestsMatching "org.chronos.chronosphere.test.cases.*"
    }
    useJUnit {
        // exclude performance tests and benchmarks
        excludeCategories 'org.chronos.common.test.junit.categories.PerformanceTest'
        // exclude all suites (they are redundant when working with gradle)
        excludeCategories 'org.junit.runners.Suite'
    }
}

dependencies {
    compile project(':org.chronos.common');
    compile project(':org.chronos.chronodb.api');
    compile project(':org.chronos.chronograph');

    compile("org.eclipse.emf:org.eclipse.emf.ecore:2.11.1-v20150805-0538")
    compile("org.eclipse.emf:org.eclipse.emf.common:2.11.0-v20150805-0538")
    compile("org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.11.1-v20150805-0538")

    testCompile project(':org.chronos.common.testing')
    testCompile project(':org.chronos.common').sourceSets.test.output;
    testCompile project(':org.chronos.chronodb.api').sourceSets.test.output;
    testCompile project(':org.chronos.chronograph').sourceSets.test.output;
    testCompile("org.apache.tinkerpop:gremlin-test:${project.tinkerpopVersion}")

    testCompile("io.strikt:strikt-core:${project.striktVersion}")

    // we also add the backend-specific modules to the test dependencies so that
    // we can have all tests in the same module (i.e. AllBackendsTest)
    testCompile project(':org.chronos.chronodb.exodus')
}
