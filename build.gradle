// ORG.CHRONOS/build.gradle     --- TOP LEVEL GRADLE FILE ---

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.0.0"
        classpath "com.github.ben-manes:gradle-versions-plugin:0.20.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.32"
    }
}


plugins {
    id "org.sonarqube" version "2.6.2"
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'com.github.ben-manes.versions'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        // Apache Gremlin snapshots
        url "https://repository.apache.org/content/groups/snapshots"
    }
}


allprojects{
	apply plugin: 'java'
	apply plugin: 'maven-publish'
	apply plugin: 'maven'
	apply plugin: 'signing'

    // configure the group and version for this project
    group = 'com.github.martinhaeusler'
    version = '1.2.16'

    // java version
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    jar {
        manifest {
            attributes 'Implementation-Version': version
        }
    }

    test {
        testLogging {
            exceptionFormat = 'full'
        }
        maxParallelForks = 4
        maxHeapSize = '4096m'
        minHeapSize = '1000m'
    }

    javadoc {
        failOnError = false
    }

    // dependency versions
    ext {
        // build specific attributes
        isJenkins = System.getenv('JENKINS_URL') != null
        buildAgent = project.isJenkins ? 'TXTURE-CI' : "LOCAL"
        buildNumber = System.getenv("BUILD_NUMBER") ?: "LOCAL_BUILD"
        buildTimestamp = new Date().format('yyyy-MM-dd HH:mm:ss')
        buildVersion = project.version

        // git specific attributes
        gitBranch = project.isJenkins ? System.getenv("BRANCH_NAME") : "NO_BRANCH"

        // credentials for s3 maven artifacts store
        s3Url = "s3://chronos.artifacts.s3.eu-central-1.amazonaws.com"

        try {
            s3AccessKey = System.getenv("CHRONOS_S3_ACCESS_KEY_ID")
        }catch(Exception e){
            s3AccessKey = null
        }

        try{
            s3SecretKey = System.getenv("CHRONOS_S3_SECRET_ACCESS_KEY")
        }catch(Exception e){
            s3SecretKey = null
        }

        // maven specific attributes for publishing
        mavenVersion = "${project.buildVersion}"

        // standard libraries
        guavaVersion = '31.0.1-jre'
        commonsLang3Version = '3.12.0'
        commonsCollectionsVersion = '4.4'
        commonsIoVersion = '2.11.0'
        commonsConfigurationVersion = '2.7'

        // Logging
        slf4jVersion = '1.7.32'
        logbackVersion = '1.2.10'
        kotlinLoggingVersion= '1.12.0'

        // Apache Tinkerpop
        tinkerpopVersion = '3.5.1'
        tinkergraphVersion = '3.0.0.M7'

        groovyVersion = '3.0.9'

        // Storage Backends
        mapDBVersion = '2.0-beta13'
        luceneVersion = '5.5.0'
        h2Version = '1.4.187'
        tuplVersion = '1.3.11'

        exodusVersion = '1.3.232'

        // Additional JDBC resources
        c3p0Version = '0.9.5.4'

        // Object Serialization
        kryoVersion = '3.0.3'
        xstreamVersion = '1.4.18'

        // Testing
        jUnitVersion = '4.13.2'
        jUnit5Version = '5.8.2'
        hamcrestVersion = '1.3'

        // code coverage & quality assurance tools
        jacocoVersion = '0.7.6.201602180812'

        striktVersion = '0.32.0'

    }

    repositories {
        // default repositories for all subprojects
        mavenCentral()
        // Apache Gremlin snapshots
        maven {
            url "https://repository.apache.org/content/groups/snapshots"
        }
    }

    jar {
        manifest.attributes provider: 'chronos.org'
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }


    test {
        useJUnitPlatform()
    }

}

subprojects {

    dependencies {
        // Standard Library Dependencies
        compile("com.google.guava:guava:${project.guavaVersion}")
        compile("org.apache.commons:commons-lang3:${project.commonsLang3Version}")
        compile("org.apache.commons:commons-collections4:${project.commonsCollectionsVersion}")
        compile("commons-io:commons-io:${project.commonsIoVersion}")
        compile("org.apache.commons:commons-configuration2:${project.commonsConfigurationVersion}")

        compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.5.32'
        // Logging Dependencies
        compile("org.slf4j:slf4j-api:${project.slf4jVersion}")
        compile("org.slf4j:jcl-over-slf4j:${project.slf4jVersion}")
        compile("org.slf4j:jul-to-slf4j:${project.slf4jVersion}")
        compile("ch.qos.logback:logback-classic:${project.logbackVersion}")

        // Testing Dependencies
        testCompile("junit:junit:${project.jUnitVersion}")
        testCompile("org.junit.platform:junit-platform-launcher:1.3.1")
        testCompile("org.junit.jupiter:junit-jupiter-api:${project.jUnit5Version}")
        testCompile("org.junit.jupiter:junit-jupiter-engine:${project.jUnit5Version}")
        testCompile("org.junit.vintage:junit-vintage-engine:${project.jUnit5Version}")

        testCompile("org.hamcrest:hamcrest-all:${project.hamcrestVersion}")
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
    	archives javadocJar, sourcesJar
	}
	
	signing {
   		sign configurations.archives
	}

    /* uploadArchives {
	  repositories {
	    mavenDeployer {
	      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
	
	      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
	        authentication(userName: ossrhUsername, password: ossrhPassword)
	      }
	
	      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
	        authentication(userName: ossrhUsername, password: ossrhPassword)
	      }
	
	      pom.project {
	        name 'Chronos'
	        packaging 'jar'
	        // optionally artifactId can be defined here 
	        description 'Versioned data storage, embeddable and easy to use.'
	        url 'https://github.com/Txture/chronos'
	
	        scm {
	          connection 'scm:git:https://github.com/MartinHaeusler/chronos'
	          developerConnection 'scm:git:https://github.com/Txture/chronos'
	          url 'https://github.com/Txture/chronos'
	        }
	
	        licenses {
	          license {
	            name 'GNU Affero General Public License v3'
	            url 'https://www.gnu.org/licenses/agpl-3.0.txt'
	          }
	        }
	
	        developers {
	          developer {
	            id 'martin.haeusler'
	            name 'Martin HÃ¤usler'
	            email 'martin.haeusler@txture.io'
	          }
	        }
	      }
	    }
	  }
	} */

}

test.dependsOn = subprojects.test
clean.dependsOn = subprojects.clean


