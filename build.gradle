// ORG.CHRONOS/build.gradle     --- TOP LEVEL GRADLE FILE ---
buildscript {
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.29.2"
        // DO NOT UPGRADE TO 0.43 and 0.44!
        // It results in java.lang.NoClassDefFoundError: groovy/xml/XmlSlurper
        classpath "com.github.ben-manes:gradle-versions-plugin:0.42.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.0"
    }
}


plugins {
    id "org.sonarqube" version "3.3"
    id 'org.jetbrains.kotlin.jvm' version "1.8.0"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'com.github.ben-manes.versions'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        // Apache Gremlin snapshots
        url "https://repository.apache.org/content/groups/snapshots"
    }
}


allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'maven'
    apply plugin: 'signing'

    // configure the group and version for this project
    group = 'org.chronos'
    version = '1.3.7'

    // java version
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    jar {
        manifest {
            attributes 'Implementation-Version': version
        }
    }

    test {
        testLogging {
            exceptionFormat = 'full'
        }
        maxParallelForks = 4
        maxHeapSize = '4096m'
        minHeapSize = '1000m'
    }

    javadoc {
        failOnError = false
    }

    // dependency versions
    ext {
        // build specific attributes
        isJenkins = System.getenv('JENKINS_URL') != null
        buildAgent = project.isJenkins ? 'TXTURE-CI' : "LOCAL"
        buildNumber = System.getenv("BUILD_NUMBER") ?: "LOCAL_BUILD"
        buildTimestamp = new Date().format('yyyy-MM-dd HH:mm:ss')
        buildVersion = project.version

        // git specific attributes
        gitBranch = project.isJenkins ? System.getenv("BRANCH_NAME") : "NO_BRANCH"


        // maven specific attributes for publishing
        mavenVersion = "${project.buildVersion}"

        // standard libraries
        guavaVersion = '31.1-jre'
        commonsLang3Version = '3.12.0'
        commonsCollectionsVersion = '4.4'
        commonsIoVersion = '2.11.0'
        commonsConfigurationVersion = '2.8.0'

        // Logging
        slf4jVersion = '1.7.36'
        logbackVersion = '1.2.11'
        kotlinLoggingVersion = '2.1.23'

        // Apache Tinkerpop
        tinkerpopVersion = '3.6.2'
        tinkergraphVersion = '3.0.0.M7'

        groovyVersion = '3.0.15'

        // Storage Backends
        mapDBVersion = '2.0-beta13'
        luceneVersion = '5.5.0'
        h2Version = '1.4.187'
        tuplVersion = '1.3.11'

        exodusVersion = '2.0.1'

        // Additional JDBC resources
        c3p0Version = '0.9.5.4'

        // Object Serialization
        kryoVersion = '3.0.3'
        xstreamVersion = '1.4.20'

        // Testing
        jUnitVersion = '4.13.2'
        jUnit5Version = '5.9.2'
        hamcrestVersion = '2.2'

        // code coverage & quality assurance tools
        jacocoVersion = '0.7.6.201602180812'
        striktVersion = '0.34.1'

        jakartaAnnotations = '2.1.1'
    }

    repositories {
        // default repositories for all subprojects
        mavenCentral()
        // Apache Gremlin snapshots
        maven {
            url "https://repository.apache.org/content/groups/snapshots"
        }
    }

    jar {
        manifest.attributes provider: 'chronos.org'
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }


    test {
        useJUnitPlatform()
    }

}

subprojects {

    dependencies {
        // Standard Library Dependencies
        implementation("com.google.guava:guava:${project.guavaVersion}")
        implementation("org.apache.commons:commons-lang3:${project.commonsLang3Version}")
        implementation("org.apache.commons:commons-collections4:${project.commonsCollectionsVersion}")
        implementation("commons-io:commons-io:${project.commonsIoVersion}")
        implementation("org.apache.commons:commons-configuration2:${project.commonsConfigurationVersion}")

        implementation("org.jetbrains.kotlin:kotlin-stdlib:1.8.0")
        // Logging Dependencies
        implementation("org.slf4j:slf4j-api:${project.slf4jVersion}")
        implementation("org.slf4j:jcl-over-slf4j:${project.slf4jVersion}")
        implementation("org.slf4j:jul-to-slf4j:${project.slf4jVersion}")
        implementation("ch.qos.logback:logback-classic:${project.logbackVersion}")

        // Testing Dependencies
        testImplementation("junit:junit:${project.jUnitVersion}")
        testImplementation("org.junit.platform:junit-platform-launcher:1.9.2")
        testImplementation("org.junit.jupiter:junit-jupiter-api:${project.jUnit5Version}")
        testImplementation("org.junit.jupiter:junit-jupiter-engine:${project.jUnit5Version}")
        testImplementation("org.junit.vintage:junit-vintage-engine:${project.jUnit5Version}")

        testImplementation("org.hamcrest:hamcrest-library:${project.hamcrestVersion}")
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    signing {
        // only sign release builds, and only if the build includes publishing
        required = !version.toString().endsWith("-SNAPSHOT") && tasks.withType(PublishToMavenRepository.class).any {
            gradle.taskGraph.hasTask(it)
        }
        // sign ALL publications
        sign(publishing.publications)
    }

    publishing {
        repositories {
            maven {
                // older guides may tell you to upload to "oss.sonatype.org".
                // That information is OUTDATED! Use "s01.oss.sonatype.org".
                name = "s01.oss.sonatype.org"
                def isReleaseVersion = !project.version.toString().endsWith("SNAPSHOT")
                def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                setUrl(isReleaseVersion ? releaseRepo : snapshotRepo)
                credentials {
                    // we will insert the ossrhUsername and ossrhPassword
                    // later via "gradle.properties".
                    username = project.hasProperty("ossrhUsername")
                            ? project.properties["ossrhUsername"] as String
                            : "Unknown user"
                    password = project.hasProperty("ossrhPassword")
                            ? project.properties["ossrhPassword"] as String
                            : "Unknown password"
                }
            }
        }

        publications {
            create("maven", MavenPublication.class) {
                pom {
                    groupId = project.group.toString()
                    name.set(project.name)
                    version = project.version.toString()
                    description.set("Embeddable versioned database")
                    url.set("https://github.com/Txture/chronos")

                    from(components["java"])
                    artifact(tasks.getByName("sourcesJar"))
                    artifact(tasks.getByName("javadocJar"))

                    packaging = "jar"

                    licenses {
                        license {
                            name.set("AGPL-3.0")
                            url.set("https://www.gnu.org/licenses/agpl-3.0.en.html")
                        }
                    }

                    scm {
                        connection.set("scm:git:git@github.com:Txture/chronos.git")
                        developerConnection.set("scm:git:git@github.com:Txture/chronos.git")
                        url.set("https://github.com/Txture/chronos")
                    }

                    developers {
                        developer {
                            // your github SSH key username
                            id.set("Martin Häusler")
                            // your plain name
                            name.set("Martin Häusler")
                            // your email
                            email.set("martin.haeusler@txture.io")
                        }
                    }
                }
            }
        }
    }

}

test.dependsOn = subprojects.test
clean.dependsOn = subprojects.clean


