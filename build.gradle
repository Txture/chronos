// ORG.CHRONOS/build.gradle     --- TOP LEVEL GRADLE FILE ---

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.0.0"
        classpath "com.github.ben-manes:gradle-versions-plugin:0.20.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.61"
    }
}


plugins {
    id "org.sonarqube" version "2.6.2"
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'com.github.ben-manes.versions'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        // Apache Gremlin snapshots
        url "https://repository.apache.org/content/groups/snapshots"
    }
}

def allTestCoverageFile = "$buildDir/jacoco/allTestCoverage.exec"

allprojects{
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'findbugs'
    apply plugin: 'jacoco'

    // configure the group and version for this project
    group = 'org.chronos'
    version = '1.0.0-SNAPSHOT'

    // java version
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    jar {
        manifest {
            attributes 'Implementation-Version': version
        }
    }

    test {
        testLogging {
            exceptionFormat = 'full'
        }
        maxParallelForks = 4
        maxHeapSize = '4096m'
        minHeapSize = '1000m'
    }

    javadoc {
        failOnError = false
    }

    // dependency versions
    ext {
        // build specific attributes
        isJenkins = System.getenv('JENKINS_URL') != null
        buildAgent = project.isJenkins ? 'TXTURE-CI' : "LOCAL"
        buildNumber = System.getenv("BUILD_NUMBER") ?: "LOCAL_BUILD"
        buildTimestamp = new Date().format('yyyy-MM-dd HH:mm:ss')
        buildVersion = project.version

        // git specific attributes
        gitBranch = project.isJenkins ? System.getenv("BRANCH_NAME") : "NO_BRANCH"

        // credentials for s3 maven artifacts store
        s3Url = "s3://chronos.artifacts.s3.eu-central-1.amazonaws.com"

        try {
            s3AccessKey = System.getenv("CHRONOS_S3_ACCESS_KEY_ID")
        }catch(Exception e){
            s3AccessKey = null
        }

        try{
            s3SecretKey = System.getenv("CHRONOS_S3_SECRET_ACCESS_KEY")
        }catch(Exception e){
            s3SecretKey = null
        }

        // maven specific attributes for publishing
        mavenVersion = "${project.buildVersion}"

        // standard libraries
        guavaVersion = '27.1-jre'
        commonsLang3Version = '3.8.1'
        commonsCollectionsVersion = '4.3'
        commonsIoVersion = '2.6'
        commonsConfigurationVersion = '1.10'

        // Logging
        slf4jVersion = '1.7.12'
        logbackVersion = '1.1.3'

        // Apache Tinkerpop
        tinkerpopVersion = '3.4.2'
        tinkergraphVersion = '3.0.0.M7'

        groovyVersion = '2.5.2'

        // Storage Backends
        mapDBVersion = '2.0-beta13'
        luceneVersion = '5.5.0'
        h2Version = '1.4.187'
        tuplVersion = '1.3.11'

        exodusVersion = '1.3.124'

        // Additional JDBC resources
        c3p0Version = '0.9.5.4'

        // Object Serialization
        kryoVersion = '3.0.3'
        xstreamVersion = '1.4.11.1'

        // Testing
        jUnitVersion = '4.12'
        jUnit5Version = '5.3.1'
        hamcrestVersion = '1.3'

        // code coverage & quality assurance tools
        jacocoVersion = '0.7.6.201602180812'
        findbugsVersion = '3.0.0'
    }

    repositories {
        // default repositories for all subprojects
        mavenCentral()
        // Apache Gremlin snapshots
        maven {
            url "https://repository.apache.org/content/groups/snapshots"
        }
    }

    jacoco {
        toolVersion = "${project.jacocoVersion}"
    }

    jar {
        manifest.attributes provider: 'chronos.org'
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }


    test {
        useJUnitPlatform()
    }
}

subprojects {

    dependencies {
        // Standard Library Dependencies
        compile("com.google.guava:guava:${project.guavaVersion}")
        compile("org.apache.commons:commons-lang3:${project.commonsLang3Version}")
        compile("org.apache.commons:commons-collections4:${project.commonsCollectionsVersion}")
        compile("commons-io:commons-io:${project.commonsIoVersion}")
        compile("commons-configuration:commons-configuration:${project.commonsConfigurationVersion}")

        compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.61'
        // Logging Dependencies
        compile("org.slf4j:slf4j-api:${project.slf4jVersion}")
        compile("org.slf4j:jcl-over-slf4j:${project.slf4jVersion}")
        compile("org.slf4j:jul-to-slf4j:${project.slf4jVersion}")
        compile("ch.qos.logback:logback-classic:${project.logbackVersion}")

        // Testing Dependencies
        testCompile("junit:junit:${project.jUnitVersion}")
        testCompile("org.junit.platform:junit-platform-launcher:1.3.1")
        testCompile("org.junit.jupiter:junit-jupiter-api:${project.jUnit5Version}")
        testCompile("org.junit.jupiter:junit-jupiter-engine:${project.jUnit5Version}")
        testCompile("org.junit.vintage:junit-vintage-engine:${project.jUnit5Version}")

        testCompile("org.hamcrest:hamcrest-all:${project.hamcrestVersion}")
    }

    findbugs {
        toolVersion = project.findbugsVersion
        ignoreFailures = true
        reportsDir = file("$project.buildDir/findbugsReports")
        effort = 'max'
        omitVisitors = ['SerializableIdiom']
    }

    sonarqube {
        properties {
            property "sonar.projectKey", "chronos"
            property "sonar.core.codeCoveragePlugin", "jacoco"
            property "sonar.jacoco.reportPath", allTestCoverageFile
        }
    }

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)
    }

}

test.dependsOn = subprojects.test
clean.dependsOn = subprojects.clean

task wrapper(type: Wrapper) {
    gradleVersion = '4.10.1'
}

task debug {
    doLast {
        println "java.home is " + System.properties['java.home']
    }
}

task jacocoMergeTest(type: JacocoMerge) {
    destinationFile = file(allTestCoverageFile)
    executionData = project.fileTree(dir: '.', include:'**/build/jacoco/test.exec')
}

task jacocoMerge(dependsOn: ['jacocoMergeTest']) {
    // used to run the other merge tasks
}

tasks['sonarqube'].with {
    dependsOn.clear()
    dependsOn 'test'
    dependsOn 'jacocoMerge'
}

sonarqube {
    properties {
        property "sonar.projectKey", "chronos"
        property "sonar.jacoco.reportPaths", allTestCoverageFile
    }
}