import java.util.*

plugins {
    alias(libs.plugins.kotlin.jvm)
    java
    id("maven-publish")
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

kotlin {
    sourceSets {
        test {

        }
    }
}

tasks.jar {
    manifest {
        attributes(
            "Implementation-Title" to "Chronos Common"
        )
    }
}

val sourceJar by tasks.registering(Jar::class) {
    from(sourceSets.main.get().allSource)
    archiveClassifier.set("sources")
}

dependencies {
    testImplementation(project(":org.chronos.common.testing"))

    implementation(libs.kryo)
    implementation(libs.jakarta.annotations)
    implementation(libs.guava)
    implementation(libs.apache.commons.configuration2)

    implementation(libs.slf4j.api)

    testImplementation(libs.bundles.testing)
}

tasks.test {
    useJUnit {
        excludeCategories("org.chronos.common.test.junit.categories.PerformanceTest")
    }

    filter {
        includeTestsMatching("org.chronos.common.test.cases.*")
    }
}

afterEvaluate {

    publishing {

        publications {
            create<MavenPublication>("mavenJava") {
                from(components["java"])
                artifact(sourceJar.get())

                groupId = project.group.toString()
                artifactId = project.name
                version = project.property("mavenVersion") as String
            }
        }

        repositories {
            maven {
                setUrl(project.property("s3Url") as String)
                credentials(AwsCredentials::class) {
                    accessKey = project.property("s3AccessKey") as? String
                    secretKey = project.property("s3SecretKey") as? String
                }
            }
        }

    }

}

// Task to generate buildInfo.properties
val generateBuildInfoFile by tasks.registering {
    val configFile = file("src/main/resources/buildInfo.properties")
    outputs.file(configFile)

    doLast {
        println("Creating build info file (${project.version}) in: ${configFile.absolutePath}")

        if (configFile.exists()) {
            val oldProps = Properties().apply {
                load(configFile.inputStream())
            }
            val oldVersion = oldProps.getProperty("org.chronos.buildVersion")
            if (oldVersion == project.version.toString()) return@doLast
            configFile.delete()
        }

        configFile.parentFile.mkdirs()
        configFile.createNewFile()

        val props = Properties().apply {
            setProperty("org.chronos.buildVersion", project.version.toString())
        }

        configFile.outputStream().use { out ->
            out.write("# GENERATED BY CHRONOS BUILD SCRIPT\n\n".toByteArray())
            props.store(out, null)
        }
    }
}

// Ensure build info file is generated before compiling
tasks.named("processResources"){
    dependsOn(generateBuildInfoFile)
}

tasks.named("compileJava") {
    dependsOn(generateBuildInfoFile)
}

tasks.named("compileTestJava") {
    dependsOn(generateBuildInfoFile)
}
